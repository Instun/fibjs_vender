name: Build/release

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      - 'ci/**'
      - 'ci-**'
      - 'releases/**'
      - 'dev'
      - 'master'
      - 'test_ci'
      - 'feat/**'
    tags:
      - v0.*.*
      - v1.*.*
  pull_request:
    branches:
      - 'dev'
  # release:
  #   # Only use the types keyword to narrow down the activity types that will trigger your workflow.
  #   types: [published, created, edited]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    strategy:
      matrix:
        os: [ubuntu-18.04]
        target_arch: [amd64, i386, arm, arm64, mips, mips64]
        build_type: [release, debug]
        include:
          - os: windows-2022
            target_arch: amd64
            build_type: release
            use_clang: "false"
          - os: windows-2022
            target_arch: i386
            build_type: release
            use_clang: "false"
          - os: windows-2022
            target_arch: arm64
            build_type: release
            use_clang: "false"
          - os: windows-2022
            target_arch: amd64
            build_type: debug
          - os: windows-2022
            target_arch: i386
            build_type: debug
          - os: windows-2022
            target_arch: arm64
            build_type: debug
          - os: macos-10.15
            target_arch: amd64
            build_type: release
          - os: macos-10.15
            target_arch: amd64
            build_type: debug

    steps:
      - name: Switch XCode to 11.4
        uses: maxim-lobanov/setup-xcode@v1
        if: runner.os == 'macOS'
        with:
          xcode-version: '11.4'
          
      - name: Check out Git repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set Env Variables
        id: set-env-vars
        shell: bash
        run: |
          bash .github/workflows/set-env-vars.sh
        env:
          TARGET_ARCH: ${{ matrix.target_arch }}
          BUILD_TYPE: ${{ matrix.build_type }}
          BUILD_USE_CLANG: ${{ matrix.use_clang }}

      - name: Setup ubuntu
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo bash .github/workflows/setup_ubuntu.sh

      - name: Build
        shell: bash
        run: |
          sh build -j2 ${TARGET_ARCH} ${BUILD_TYPE} ci
        env:
          TARGET_ARCH: ${{ matrix.target_arch }}
          BUILD_TYPE: ${{ matrix.build_type }}
          TARGET_OS: ${{ steps.set-env-vars.outputs.TARGET_OS }}
          GIT_BRANCH: ${{ steps.set-env-vars.outputs.GIT_BRANCH }}
          BUILD_USE_CLANG: ${{ steps.set-env-vars.outputs.BUILD_USE_CLANG }}

      - name: Package
        shell: bash
        run: |
          bash .github/workflows/pack.sh
        env:
          TARGET_ARCH: ${{ matrix.target_arch }}
          BUILD_TYPE: ${{ matrix.build_type }}
          RELEASE_TAG: ${{ steps.set-env-vars.outputs.RELEASE_TAG }}
          TARGET_OS: ${{ steps.set-env-vars.outputs.TARGET_OS }}
          DIST_FILE: ${{ steps.set-env-vars.outputs.DIST_FILE }}

      - name: Generate V8 Snapshot
        id: generate-v8-snapshot
        if: ${{ matrix.build_type == 'release' }}
        continue-on-error: true
        shell: bash
        run: |
          bash .github/workflows/gen_snapshot.sh
        env:
          DIST_DIR: ${{ steps.set-env-vars.outputs.DIST_DIR }}
          TARGET_OS_NAME: ${{ steps.set-env-vars.outputs.TARGET_OS_NAME }}
          TARGET_ARCH: ${{ matrix.target_arch }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.set-env-vars.outputs.IS_UPLOAD_ASSETS != '' && steps.set-env-vars.outputs.TAG_EXISTED == '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        with:
          tag_name: ${{ steps.set-env-vars.outputs.RELEASE_TAG }}
          release_name: Release ${{ steps.set-env-vars.outputs.RELEASE_TAG }}
          body: ${{ steps.set-env-vars.outputs.GIT_COMMIT_HEAD_MSG }}
          draft: false
          prerelease: true

      - name: Github Release
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        if: ${{ steps.set-env-vars.outputs.IS_UPLOAD_ASSETS != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.set-env-vars.outputs.GIT_COMMIT_HEAD_MSG }}
          draft: false
          prerelease: true
          files: |
             ${{ github.workspace }}/${{ steps.set-env-vars.outputs.DIST_FILEPATH }}
             ${{ github.workspace }}/${{ steps.set-env-vars.outputs.SNAPSHOT_FNAME }}
          name: Release ${{ steps.set-env-vars.outputs.RELEASE_TAG }}
          tag_name: ${{ steps.set-env-vars.outputs.RELEASE_TAG }}
          
      - name: Test jssdk
        id: test-jssdk
        shell: bash
        run: |
          bash .github/workflows/jssdk_test.sh
        env:
          DIST_DIR: ${{ steps.set-env-vars.outputs.DIST_DIR }}
          TARGET_OS_NAME: ${{ steps.set-env-vars.outputs.TARGET_OS_NAME }}
          TARGET_ARCH: ${{ matrix.target_arch }}
          BUILD_TYPE: ${{ matrix.build_type }}